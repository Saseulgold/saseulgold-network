package vm

var OperatorFunctions = map[string]map[string]func(*Interpreter, []interface{}) interface{}{
	"BasicOperator": {
		"OpAdd": OpAdd,
		"OpSub": OpSub,
		"OpMul": OpMul,
		"OpDiv": OpDiv,
		// "OpMod":  OpMod,
		// "OpPow":  OpPow,
		"OpEq":  OpEq,
		"OpNeq": OpNeq,
		"OpGt":  OpGt,
		"OpGte": OpGte,
		"OpLt":  OpLt,
		"OpLte": OpLte,
		"OpAnd": OpAnd,
		"OpOr":  OpOr,
		// "OpNot":  OpNot,
	},
	"UtilOperator": {
		"OpArrayPush":  OpArrayPush,
		"OpConcat":     OpConcat,
		"OpCount":      OpCount,
		"OpStrlen":     OpStrlen,
		"OpEncodeJson": OpEncodeJson,
		"OpDecodeJson": OpDecodeJson,
		"OpHashLimit":  OpHashLimit,
		"OpHashMany":   OpHashMany,
		"OpHash":       OpHash,
		"OpShortHash":  OpShortHash,
		"OpIdHash":     OpIdHash,
		"OpSignVerify": OpSignVerify,
	},
	"CastOperator": {
		"OpGetType":   OpGetType,
		"OpIsNumeric": OpIsNumeric,
		"OpIsInt":     OpIsInt,
		"OpAsString":  OpAsString,
		"OpIsString":  OpIsString,
		"OpIsNull":    OpIsNull,
		"OpIsBool":    OpIsBool,
		"OpIsArray":   OpIsArray,
		"OpIsDouble":  OpIsDouble,
	},
	"ComparisonOperator": {
		"OpEq":  OpEq,
		"OpNeq": OpNeq,
		"OpGt":  OpGt,
		"OpGte": OpGte,
		"OpLt":  OpLt,
		"OpLte": OpLte,
	},
}
