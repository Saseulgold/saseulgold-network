package vm

var OperatorFunctions = map[string]map[string]MethodFunc{
	"BasicOperator": {
		"$load_param": OpLoadParam,
		"$condition":  OpCondition,
		"$response":   OpResponse,
		"$weight":     OpWeight,
		"$if":         OpIf,
		"$and":        OpAnd,
		"$or":         OpOr,
		"$get":        OpGet,
		"$in":         OpIn,
	},
	"ComparisonOperator": {
		"$eq":  OpEq,
		"$ne":  OpNeq,
		"$gt":  OpGt,
		"$gte": OpGte,
		"$lt":  OpLt,
		"$lte": OpLte,
	},
	"ArithmeticOperator": {
		"$add":          OpAdd,
		"$sub":          OpSub,
		"$mul":          OpMul,
		"$div":          OpDiv,
		"$precise_add":  OpPreciseAdd,
		"$precise_sub":  OpPreciseSub,
		"$precise_mul":  OpPreciseMul,
		"$precise_div":  OpPreciseDiv,
		"$precise_sqrt": OpPreciseSqrt,
		"$scale":        OpScale,
		"$min":          OpMin,
		"$max":          OpMax,
	},
	"UtilOperator": {
		"$array_push":  OpArrayPush,
		"$concat":      OpConcat,
		"$count":       OpCount,
		"$len":         OpLen,
		"$strlen":      OpStrlen,
		"$encode_json": OpEncodeJson,
		"$reg_match":   OpRegMatch,
		"$decode_json": OpDecodeJson,
		"$hash_limit":  OpHashLimit,
		"$hash_many":   OpHashMany,
		"$hash":        OpHash,
		"$short_hash":  OpShortHash,
		"$id_hash":     OpIdHash,
		"$sign_verify": OpSignVerify,
		"$set":         OpSet,
		"$era":         OpEra,
		"$as_string":   OpAsString,
		"$sutime": 	OpSUtime,
	},
	"CastOperator": {
		"$get_type":   OpGetType,
		"$is_numeric": OpIsNumeric,
		"$is_int":     OpIsInt,
		"$as_string":  OpAsString,
		"$is_string":  OpIsString,
		"$is_null":    OpIsNull,
		"$is_bool":    OpIsBool,
		"$is_array":   OpIsArray,
		"$is_double":  OpIsDouble,
	},
	"ReadOperator": {
		"$read_local":     OpReadLocal,
		"$read_universal": OpReadUniversal,
		"$check":          OpCheck,
	},
	"WriteOperator": {
		"$write_universal": OpWriteUniversal,
		"$write_local":     OpWriteLocal,
	},
	"ChainOperator": {
		"$list_block":       OpListBlock,
		"$list_transaction": OpListTransaction,
	},
}
